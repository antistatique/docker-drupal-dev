#!/usr/bin/env bash
set -e

# Environement variables
: ${DATABASE_URL:="mysql://root:root@db/drupal"}
: ${DATABASE_DUMP:="/var/backups/database.sql"}
: ${SMTP_HOST:="mail:1025"}
: ${SITE_NAME:="Drupal Website"}
: ${SITE_UUID:=$(sed -n -e '/uuid:/ s/.*\: *//p' ./config/d8/sync/system.site.yml)}
: ${SITE_HASH_SALT:=""}
: ${PRIVATE_FILES:=""}
: ${DEFAULT_CONTENT:=""}

: ${BEHAT_PROFILE:="docker"}
: ${PHPUNIT_DEFAULT_GROUP:=""}
: ${SYMFONY_DEPRECATIONS_HELPER:="weak"}
: ${SIMPLETEST_DB:="$DATABASE_URL"}
: ${SIMPLETEST_BASE_URL:="http://127.0.0.1:8888"}

: ${TEST_SERVER_HOST:="0.0.0.0"}
: ${TEST_SERVER_PORT:="8888"}

# Script variables
SCRIPT_NAME=$(basename $0)
CONFIG_DIR="../config/d8/sync/"
DATABASE_USER=$(a=${DATABASE_URL#*//}; echo ${a%:*})
DATABASE_NAME=${DATABASE_URL##*/}
DATABASE_HOST=$(a=${DATABASE_URL#*@}; echo ${a%/*})
BEHAT_LOG="./log/behat"
BROWSERTEST_OUTPUT_DIRECTORY="/var/www/logs/phpunit"
DRUPAL_IS_INSTALLED=0

# Print help
function print_help() {
  echo "usage: $SCRIPT_NAME <action> [options]

  * bootstrap
    --skip-dependencies      # Do not run composer and yarn install
    --skip-install           # Do not run Drupal install (only if arealdy installed)
    --skip-default-content   # Do not load default content
    --skip-styleguide-build  # Do not run yarn build

  * db-reset
    --skip-default-content   # Do not load default content
    --update-dump            # Update database dump (include updated Drupal config)

  * behat
    --skip-reset             # Skip database reset before default content reload
    --help                   # Display behat help
    ...                      # any behat valid args

  * phpunit
    --skit-reset             # Skip reset of database before running tests
    --help                   # Display phpunit help
    ...                      # any phpunit valid args (default: --stop-on-error --stop-on-failure)

  * php-server
    --skip-default-content   # Do not load default content
    --force-reset            # Reset database before launch server
    --help                   # Display server help

  * apache-server
    --skip-default-content   # Do not load default content
    --force-reset            # Reset database before launch server
    --help                   # Display server help
  "
}

function drupal_is_installed() {
  if [ $DRUPAL_IS_INSTALLED -eq 0 ]; then
   DRUPAL_IS_INSTALLED=$(drush sql-query "SELECT * FROM users_field_data where uid = 1" >/dev/null 2>&1 && echo 1 || echo 0)
  fi

  [ $DRUPAL_IS_INSTALLED -eq 1 ]
}

function drupal_not_installed() {
  ! drupal_is_installed
}

# Reset database with dump made before loading default content on bootstrap.
function database_reset() {
  if [ -f $DATABASE_DUMP ]; then
    printf "\e[1;35m* Reset database.\e[0m\n"
  else
    printf "\e[01;31No database dump found, run '$SCRIPT_NAME bootstrap' first.\e[0m\n"
    exit 1
  fi

  # Create database if not exists
  drush sql:create -y

  # Load database dump to reset its state
  $(drush sql:connect) < $DATABASE_DUMP

  # Load Drupal config
  import_drupal_config
}

# Dump database
function database_dump() {
  printf "\e[1;35m* Dump database.\e[0m\n"

  mkdir -p $(dirname $DATABASE_DUMP)
  drush sql-dump --result-file=$DATABASE_DUMP -y
}

# Load default content in database
function enable_default_content() {
  if [ ! -z "$DEFAULT_CONTENT" ] && drush pm-list | grep -q $DEFAULT_CONTENT; then
    printf "\e[1;35m* Run fixtures & default content.\e[0m\n"

    drush pmu default_content $DEFAULT_CONTENT -y
    drush en $DEFAULT_CONTENT -y
  fi
}

# Disable default content modules
function disable_default_content() {
  (
    set +e
    drush pmu default_content $DEFAULT_CONTENT -y || true
  )
}

# Update swiftmailer config to use host from environment
function enable_mail_host() {
  if [ ! -z "$SMTP_HOST" ] && drush pm-list | grep -q 'swiftmailer'; then
    printf "\e[1;35m* Setup mail host.\e[0m\n"

    drush cset swiftmailer.transport smtp_host "${SMTP_HOST%:*}" -y
    drush cset swiftmailer.transport smtp_port "${SMTP_HOST#*:}" -y
    drush cset swiftmailer.transport smtp_encryption '0' -y
  fi
}

# Setup settings.php file, database connection and directory for private files
function setup() {
  if [ ! -f ./web/sites/default/settings.php ]; then
    printf "\e[1;35m* Create settings.php file.\e[0m\n"
    mkdir -p ./web/sites/default
    chmod 775 ./sites/default
    cp ./web/sites/default/default.settings.php ./web/sites/default/settings.php
    chmod 664 --quiet ./web/sites/default/settings.php || true
  fi

  # Set Hash Salt
  : ${SITE_HASH_SALT:=$(drush php-eval 'echo \Drupal\Component\Utility\Crypt::randomBytesBase64(55) . "\n";')}
  sed -ri -e "s@\\\$settings\['hash_salt'\].+;@\\\$settings\['hash_salt'\] = '$SITE_HASH_SALT';@g" ./web/sites/default/settings.php

  # Fix config directory in settings file
  sed -ri -e "s@\\\$config_directories\['sync'\].+;@\\\$config_directories\['sync'\] = '../config/d8/sync';@g" ./web/sites/default/settings.php

  # Use DATABASE_URL to populate database config
  if grep -vq '^\$databases\[\"default\"\]\[\"default\"\]' ./web/sites/default/settings.php; then
    echo '$databases["default"]["default"] = \Drupal\Core\Database\Database::convertDbUrlToConnectionInfo(getenv("DATABASE_URL"), DRUPAL_ROOT);' \
      >> ./web/sites/default/settings.php
  fi

  # Setup usage of private files
  if [ ! -z "$PRIVATE_FILES" ]; then
    printf "\e[1;35m* Setup private files.\e[0m\n"
    create_private_files_dir

    sed -ri -e "s@.+\\\$settings\['file_private_path'\].+;@\\\$settings\['file_private_path'\] = '$PRIVATE_FILES';@g" ./web/sites/default/settings.php
  fi
}

# Import Drupal config
#
# Sometimes Drupal import configs in wrong orders.
# So we repeat the config-import max. 4 times on successives fails.
function import_drupal_config() {
  printf "\e[1;35m* Import drupal configuration.\e[0m\n"

  (
    set +e

    attempt=0
    until drush config-import -y --source="$CONFIG_DIR"; do
      attempt=$(( attempt+1 ))
      if [ "$attempt" -ge 4 ]; then
        exit 1
      fi
    done
  )

  # Fix Sitename bugged keep display "| Drupal"
  # @see https://www.drupal.org/node/2851877
  drush ev '\Drupal::languageManager()->getLanguageConfigOverrideStorage("fr")->delete("system.site");'

  # Disabling "automated cron"
  drush config-set automated_cron.settings interval 0 -y

  # Rebuild cache
  drush cache-rebuild
}

# Ensure directory for private files exists
function create_private_files_dir() {
  if [ ! -z "$PRIVATE_FILES" ]; then
    mkdir -vp "$PRIVATE_FILES"
    chmod 775 "$PRIVATE_FILES"
  fi
}


#
# BOOTSTRAP Drupal
#
if [ "$1" = "bootstrap" ]; then
  shift

  SKIP_DEPENDENCIES=0
  SKIP_INSTALL=0
  SKIP_RESET=0
  SKIP_DEFAULT=0
  SKIP_STYLEGUIDE=0

  while [ $# -gt 0 ]; do
    case "$1" in
      --skip-dependencies)
        SKIP_DEPENDENCIES=1
        ;;
      --skip-install)
        SKIP_INSTALL=1
        ;;
      --skip-reset)
        SKIP_RESET=1
        ;;
      --skip-default-content)
        SKIP_DEFAULT=1
        ;;
      --skip-styleguide-build)
        SKIP_STYLEGUIDE=1
        ;;
      --only-install)
        SKIP_DEPENDENCIES=1
        SKIP_DEFAULT=1
        SKIP_STYLEGUIDE=1
        ;;
    esac
    shift
  done

  if [ $SKIP_DEPENDENCIES -eq 0 ]; then
    printf "\e[1;35m* Install dependencies.\e[0m\n"

    composer install --no-interaction --prefer-dist --no-suggest --no-progress
    yarn install --non-interactive --no-progress
  fi

  # Setup settings & Co.
  setup

  # Install Drupal
  if [ $SKIP_INSTALL -eq 0 ] || (drupal_not_installed && [ ! -f $DATABASE_DUMP ]); then
    printf "\e[1;35m* Install Drupal from scratch.\e[0m\n"
    if [ $SKIP_INSTALL -eq 1 ] && drupal_not_installed; then
      printf "\e[1;35m* (forced beceause not installed).\e[0m\n"
    fi

    (
      set -e

      # move in web directory
      cd web

      # Install drupal
      drush si standard --db-url=$DATABASE_URL --site-name="$SITE_NAME" --account-name=admin --account-pass=admin --account-mail="admin@example.com" -y

      # Remove unwanted content from database that break config import.
      drush ev '\Drupal::entityManager()->getStorage("shortcut_set")->load("default")->delete();'

      # Fix Drupal UUID in database config
      drush config-set system.site uuid "$SITE_UUID" -y
    )

    # Load config
    import_drupal_config

    # Setup mailer
    enable_mail_host

    # Save database dump after install
    database_dump

  # Or reset database?
  elif [ $SKIP_RESET -eq 0 ]; then
    printf "\e[1;35m* Skip install Drupal from scratch. But reset database.\e[0m\n"

    # Reset the database
    database_reset

    # Setup mailer
    enable_mail_host

  else
    printf "\e[1;35m* Skip install Drupal from scratch.\e[0m\n"
  fi

  # Load default content (then disable module)
  if [ $SKIP_DEFAULT -eq 0 ] && drupal_is_installed; then
    enable_default_content
    disable_default_content
  fi

  # Build styleguide assets
  if [ $SKIP_STYLEGUIDE -eq 0 ]; then
    yarn build --production
  fi

#
# CREATE SETTINGS FILE
#
elif [ "$1" = "settings" ]; then
  shift

  # Setup settings & Co.
  setup

#
# RESET DATABASE
#
elif [ "$1" = "db-reset" ]; then
  shift

  SKIP_DEFAULT=0
  UPDATE_DATABASE_DUMP=0

  while [ $# -gt 0 ]; do
    case "$1" in
      --skip-default-content)
        SKIP_DEFAULT=1
        ;;
      --update-dump)
        UPDATE_DATABASE_DUMP=1
        ;;
    esac
    shift
  done

  # Reset database without default content
  database_reset

  # Save database dump after reset (including drupal config update)
  if [ $UPDATE_DATABASE_DUMP -eq 1 ]; then
    database_dump
  fi

  # Load default content (then disable module)
  if [ $SKIP_DEFAULT -eq 0 ]; then
    enable_default_content
    disable_default_content
  fi

#
# RUN PHP SERVER
#
elif [ "$1" = "php-server" ] || [ "$1" = "runserver" ]; then
  shift

  TEST_SERVER_ARGS=()
  SKIP_RESET=1
  SKIP_DEFAULT=0

  while [ $# -gt 0 ]; do
    case "$1" in
      --force-reset)
        SKIP_RESET=0
        ;;
      --skip-default-content)
        SKIP_DEFAULT=1
        ;;
      *:*)
        TEST_SERVER_HOST=${1%:*}
        TEST_SERVER_PORT=${1#*:}
        ;;
      --help)
        drush runserver --help
        exit $?
        ;;
      *)
        TEST_SERVER_ARGS+=($1)
        ;;
    esac
    shift
  done

  # Setup settings & Co.
  setup

  if [ $SKIP_RESET -eq 0 ] || drupal_not_installed; then
    # Reset database
    database_reset

    # Setup mailer (was reset when loaded back config)
    enable_mail_host

    # Load default content (then disable module)
    if [ $SKIP_DEFAULT -eq 0 ] && [ $SKIP_RESET -eq 0 ]; then
      enable_default_content
      disable_default_content
    fi
  fi

  # Run server
  printf "\e[1;35m* Launch test server.\e[0m\n"
  drush runserver $TEST_SERVER_HOST:$TEST_SERVER_PORT "${TEST_SERVER_ARGS[@]}"

#
# RUN TEST SERVER
#
elif [ "$1" = "apache-server" ]; then
  shift

  TEST_SERVER_ARGS=()
  TEST_SERVER_CACHE=0
  SKIP_DEFAULT=0
  SKIP_RESET=1

  while [ $# -gt 0 ]; do
    case "$1" in
      --force-reset)
        SKIP_RESET=1
        ;;
      --skip-default-content)
        SKIP_DEFAULT=1
        ;;
      --cache)
        TEST_SERVER_CACHE=1
        ;;
      --help)
        apache2-foreground -h
        exit $?
        ;;
      *)
        TEST_SERVER_ARGS+=($1)
        ;;
    esac
    shift
  done

  # Setup settings & Co.
  setup

  if [ $SKIP_RESET -eq 0 ] || drupal_not_installed; then
    # Reset database
    database_reset

    # Setup mailer (was reset when loaded back config)
    enable_mail_host

    # Load default content (then disable module)
    if [ $SKIP_DEFAULT -eq 0 ] && [ $SKIP_RESET -eq 0 ]; then
      enable_default_content
      disable_default_content
    fi
  fi

  # Disable opache file timestemps check
  if [ $TEST_SERVER_CACHE -eq 1 ]; then
    echo 'opcache.validate_timestamps=0' >> /usr/local/etc/php/conf.d/opcache-recommended.ini
  fi

  # Run server
  printf "\e[1;35m* Launch test server.\e[0m\n"
  apache2-foreground -c "DocumentRoot $APACHE_DOCUMENT_ROOT" -c "Listen $TEST_SERVER_PORT" "${TEST_SERVER_ARGS[@]}"

#
# RUN BEHAT TESTS
#
elif [ "$1" = "behat" ]; then
  shift

  BEHAT_ARGV=()
  SKIP_RESET=0

  while [ $# -gt 0 ]; do
    case "$1" in
      --skip-reset)
        SKIP_RESET=1
        ;;
      --help)
        behat --help
        exit $?
        ;;
      *)
        BEHAT_ARGV+=($1)
        ;;
    esac
    shift
  done

  # Setup settings & Co.
  setup

  if [ $SKIP_RESET -eq 0 ] || drupal_not_installed; then
    # Reset database
    database_reset

    # Setup mailer (was reset when loaded back config)
    enable_mail_host
  fi

  # Load default content
  enable_default_content

  # Big Pipe cause some block to be rendered with delay and break Behat tests.
  drush pmu big_pipe -y

  # Rebuild Drupal cache
  drush cache-rebuild

  # create log directory
  mkdir -vp $BEHAT_LOG
  chmod -R 777 $BEHAT_LOG

  # Run tests with docker profile
  behat --colors --strict --profile=$BEHAT_PROFILE "${BEHAT_ARGV[@]}"
  behat_exit=$?

  # Disable default content
  disable_default_content

  # Re-enable Big Pipe.
  drush en big_pipe -y

  # exit
  exit $behat_exit

#
# RUN PHPUNIT TESTS
#
elif [ "$1" = "phpunit" ]; then
  shift

  PHPUNIT_GROUPS=""
  PHPUNIT_EXCLUDE_GROUPS=""
  PHPUNIT_ARGV=()
  SKIP_RESET=0

  while [ $# -gt 0 ]; do
    case "$1" in
      --skip-reset)
        SKIP_RESET=1
        ;;
      --group=*)
        PHPUNIT_GROUPS="$PHPUNIT_GROUPS --group ${1#*=}"
        ;;
      --exclude-group=*)
        PHPUNIT_EXCLUDE_GROUPS="$PHPUNIT_EXCLUDE_GROUPS --exclude-group ${1#*=}"
        ;;
      --help)
        phpunit --help
        exit $?
        ;;
      *)
        PHPUNIT_ARGV+=($1)
        ;;
    esac
    shift
  done

  # Use default group if not in present in arguements
  : ${PHPUNIT_GROUPS:="--group $PHPUNIT_DEFAULT_GROUP"}

  # Set bacl DATABASE_URL to the simpletest db to reset proper database.
  DATABASE_URL=$SIMPLETEST_DB
  export DATABASE_URL

  # Setup settings & Co.
  setup

  if [ $SKIP_RESET -eq 0 ] || drupal_not_installed; then
    # Reset database
    database_reset

    # Setup mailer (was reset when loaded back config)
    enable_mail_host
  fi

  # Ensure log directory exists
  mkdir -vp "$BROWSERTEST_OUTPUT_DIRECTORY"
  chmod -R 777 "$BROWSERTEST_OUTPUT_DIRECTORY"

  # Run tests
  phpunit_exit=0
  (
    cd web

    export SYMFONY_DEPRECATIONS_HELPER
    export SIMPLETEST_DB
    export SIMPLETEST_BASE_URL
    export BROWSERTEST_OUTPUT_DIRECTORY

    phpunit -c core $PHPUNIT_GROUPS $PHPUNIT_EXCLUDE_GROUPS --printer="\Drupal\Tests\Listeners\HtmlOutputPrinter" "${PHPUNIT_ARGV[@]}"
    phpunit_exit=$?
  )

  # exit
  exit $phpunit_exit

#
# COMMAND NOT FOUND
#
elif [ "$1" = "run" ]; then
  shift

  exec "$@"

#
# COMMAND NOT FOUND
#
else
  [ "$1" = "--help" ] || printf "\e[01;35m'$1\` command not found.\e[0m\n\n"
  print_help
  exit 1
fi
